{"version":3,"sources":["Map.js","App.js","index.js"],"names":["Mapboxgl","accessToken","Map","mapContainerRef","useRef","lng","setLng","useState","lat","setLat","zoom","setZoom","useEffect","map","container","current","style","center","logoPosition","draw","MapboxDraw","displayControlsDefault","controls","polygon","trash","defaultMode","addControl","geocoder","MapboxGeocoder","types","render","item","maki","properties","text","mapboxgl","NavigationControl","on","getCenter","toFixed","getZoom","remove","className","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"gTAOAA,IAASC,YACP,iGAyGaC,MAvGH,KACV,MAAMC,EAAkBC,iBAAO,OAExBC,EAAKC,GAAUC,mBAAS,OACxBC,EAAKC,GAAUF,mBAAS,OACxBG,EAAMC,GAAWJ,mBAAS,KAsFjC,OAnFAK,qBAAU,KACR,MAAMC,EAAM,IAAIb,IAASE,IAAI,CAC3BY,UAAWX,EAAgBY,QAC3BC,MAAO,qCAEPC,OAAQ,CAACZ,EAAKG,GACdE,KAAMA,EACNQ,aAAc,gBAGVC,EAAO,IAAIC,IAAW,CAC1BC,wBAAwB,EAExBC,SAAU,CACVC,SAAS,EACTC,OAAO,GAIPC,YAAa,iBAEbZ,EAAIa,WAAWP,EAAK,YAEtB,MAAMQ,EAAW,IAAIC,IAAe,CAClC3B,YAAaD,IAASC,YACtB4B,MAAO,MAEPC,OAAQ,SAAUC,GAElB,MAAMC,EAAOD,EAAKE,WAAWD,MAAQ,SACrC,MAAM,mIAAN,OACsFA,EADtF,yEAGED,EAAKG,KAHP,kCAOAC,SAAUnC,MA2CZ,OAzCEa,EAAIa,WAAWC,GAEjBd,EAAIa,WAAW,IAAI1B,IAASoC,kBAAqB,aAEjDvB,EAAIwB,GAAG,QAAQ,KACb/B,EAAOO,EAAIyB,YAAYjC,IAAIkC,QAAQ,IACnC9B,EAAOI,EAAIyB,YAAY9B,IAAI+B,QAAQ,IACnC5B,EAAQE,EAAI2B,UAAUD,QAAQ,OAkCzB,IAAM1B,EAAI4B,WAChB,IAGD,gCACE,qBAAKC,UAAU,eAAf,SACE,8CACcrC,EADd,gBACgCG,EADhC,YAC8CE,OAGhD,qBAAKgC,UAAU,gBAAgBC,IAAKxC,QCjG3ByC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASf,OACP,cAAC,IAAMgB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8d63fe0a.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport Mapboxgl from 'mapbox-gl';\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\nimport './Map.css';\r\n\r\n\r\nMapboxgl.accessToken =\r\n  'pk.eyJ1IjoiYW5uYWdvbGQwMDciLCJhIjoiY2t2bTNsajF2MWNiMDJ1dGtxM2lwOTZybSJ9.BvkgIPX-S7LrBwyqDMgiZw';\r\n\r\nconst Map = () => {\r\n  const mapContainerRef = useRef(null);\r\n\r\n  const [lng, setLng] = useState(36.300);\r\n  const [lat, setLat] = useState(31.400);\r\n  const [zoom, setZoom] = useState(6.6);\r\n\r\n  // Initialize map when component mounts\r\n  useEffect(() => {\r\n    const map = new Mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n    //  style: 'mapbox://styles/annagold007/ckvm8uwn90pnp15mgbl2bstt0',\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n      logoPosition: 'bottom-left'\r\n    });\r\n\r\n    const draw = new MapboxDraw({\r\n      displayControlsDefault: false,\r\n      // Select which mapbox-gl-draw control buttons to add to the map.\r\n      controls: {\r\n      polygon: true,\r\n      trash: true\r\n      },\r\n      // Set mapbox-gl-draw to draw by default.\r\n      // The user does not have to click the polygon control button first.\r\n      defaultMode: 'draw_polygon'\r\n      });\r\n      map.addControl(draw,'top-left');\r\n       \r\n    const geocoder = new MapboxGeocoder({\r\n      accessToken: Mapboxgl.accessToken,\r\n      types: 'poi',\r\n      // see https://docs.mapbox.com/api/search/#geocoding-response-object for information about the schema of each response feature\r\n      render: function (item) {\r\n      // extract the item's maki icon or use a default\r\n      const maki = item.properties.maki || 'marker';\r\n      return `<div class='geocoder-dropdown-item'>\r\n      <img class='geocoder-dropdown-icon' src='https://unpkg.com/@mapbox/maki@6.1.0/icons/${maki}-15.svg'>\r\n      <span class='geocoder-dropdown-text'>\r\n      ${item.text}\r\n      </span>\r\n      </div>`;\r\n      },\r\n      mapboxgl: Mapboxgl\r\n      });\r\n      map.addControl(geocoder);\r\n\r\n    map.addControl(new Mapboxgl.NavigationControl(), 'top-right');\r\n\r\n    map.on('move', () => {\r\n      setLng(map.getCenter().lng.toFixed(4));\r\n      setLat(map.getCenter().lat.toFixed(4));\r\n      setZoom(map.getZoom().toFixed(2));\r\n    });\r\n    \r\n//  // change cursor to pointer when user hovers over a clickable feature\r\n//     map.on('mouseenter', e => {\r\n//       if (e.features.length) {\r\n//         map.getCanvas().style.cursor = 'pointer';\r\n//       }\r\n//     });\r\n\r\n//     // reset cursor to default when user is no longer hovering over a clickable feature\r\n//     map.on('mouseleave', () => {\r\n//       map.getCanvas().style.cursor = '';\r\n//     });\r\n\r\n//     // add tooltip when users mouse move over a point\r\n//     map.on('mousemove', e => {\r\n//       const features = map.queryRenderedFeatures(e.point);\r\n//       if (features.length) {\r\n//         const feature = features[0];\r\n\r\n//         // Create tooltip node\r\n//         const tooltipNode = document.createElement('div');\r\n//         ReactDOM.render(<Tooltip feature={feature} />, tooltipNode);\r\n\r\n//         // Set tooltip on map\r\n//         tooltipRef.current\r\n//           .setLngLat(e.lngLat)\r\n//           .setDOMContent(tooltipNode)\r\n//           .addTo(map);\r\n//       }\r\n//     });\r\n  \r\n    // Clean up on unmount\r\n    return () => map.remove();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div>\r\n      <div className='sidebarStyle'>\r\n        <div>\r\n          Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n        </div>\r\n      </div>\r\n      <div className='map-container' ref={mapContainerRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;","import React from 'react';\r\nimport Map from './Map';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}