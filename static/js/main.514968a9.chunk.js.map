{"version":3,"sources":["Map.js","App.js","index.js"],"names":["Mapboxgl","accessToken","Map","mapContainerRef","useRef","lng","setLng","useState","lat","setLat","zoom","setZoom","rounded_area","setRounded_area","useEffect","map","container","current","style","center","logoPosition","draw","MapboxDraw","displayControlsDefault","controls","polygon","trash","defaultMode","addControl","geocoder","MapboxGeocoder","types","render","item","maki","properties","text","mapboxgl","updateArea","e","data","getAll","document","getElementById","features","length","area","turf","r_area","Math","round","toFixed","getZoom","type","NavigationControl","on","getCenter","layers","getStyle","firstSymbolId","layer","id","addSource","addLayer","MapboxLegendControl","pipeline","pipeline_annotation","meter","valve","firehydrant","washout","tank","tank_annotation","wtp","wtp_annotation","intake","intake_annotation","parcels","parcels_annotation","village","village_annotation","dma","hillshade","remove","class","className","ref","App","ReactDOM","StrictMode"],"mappings":"wUAUAA,IAASC,YACP,iGA2KaC,MAzKH,KACV,MAAMC,EAAkBC,iBAAO,OAExBC,EAAKC,GAAUC,mBAAS,OACxBC,EAAKC,GAAUF,mBAAS,OACxBG,EAAMC,GAAWJ,mBAAS,MAC1BK,EAAcC,GAAmBN,mBAAS,GAmJjD,OAjJAO,qBAAU,KACR,MAAMC,EAAM,IAAIf,IAASE,IAAI,CAC3Bc,UAAWb,EAAgBc,QAC3BC,MAAO,qCAEPC,OAAQ,CAACd,EAAKG,GACdE,KAAMA,EACNU,aAAc,gBAGVC,EAAO,IAAIC,IAAW,CAC1BC,wBAAwB,EAExBC,SAAU,CAGRC,SAAS,EACTC,OAAO,GAKPC,YAAa,iBAEjBZ,EAAIa,WAAWP,EAAK,YAEpB,MAAMQ,EAAW,IAAIC,IAAe,CAClC7B,YAAaD,IAASC,YACtB8B,MAAO,MAEPC,OAAQ,SAAUC,GAElB,MAAMC,EAAOD,EAAKE,WAAWD,MAAQ,SACrC,MAAM,mIAAN,OACsFA,EADtF,yEAGED,EAAKG,KAHP,kCAOAC,SAAUrC,MAmFV,SAASsC,EAAWC,GAChB,MAAMC,EAAOnB,EAAKoB,SACHC,SAASC,eAAe,mBACvC,GAAIH,EAAKI,SAASC,OAAS,EAAG,CAC1B,MAAMC,EAAOC,OAAUP,GAEjBQ,EAASC,KAAKC,MAAa,IAAPJ,GAAc,IACxCjC,EAAgBmC,EAAOG,QAAQ,SAC3BpC,EAAIqC,UAEO,gBAAXb,EAAEc,MACFxC,EAAgB,GAI9B,OAhGEE,EAAIa,WAAWC,GAEjBd,EAAIa,WAAW,IAAI5B,IAASsD,kBAAqB,aAEjDvC,EAAIwC,GAAG,QAAQ,KACbjD,EAAOS,EAAIyC,YAAYnD,IAAI8C,QAAQ,IACnC1C,EAAOM,EAAIyC,YAAYhD,IAAI2C,QAAQ,IACnCxC,EAAQI,EAAIqC,UAAUD,QAAQ,OAGhCpC,EAAIwC,GAAG,QAAQ,KACT,MAAME,EAAS1C,EAAI2C,WAAWD,OAE9B,IAAIE,EACJ,IAAK,MAAMC,KAASH,EAChB,GAAc,WAAVG,EAAoB,CACpBD,EAAgBC,EAAMC,GACtB,MAIR9C,EAAI+C,UAAU,cAAe,CACzB,KAAQ,UACR,KAAQ,2EAEZ/C,EAAIgD,SACA,CACI,GAAM,mBACN,KAAQ,OACR,OAAU,cACV,OAAU,GACV,MAAS,CACL,aAAc,OACd,eAAgB,KAUxBJ,GA8BN5C,EAAIa,WAAW,IAAIoC,sBA1BH,CACZC,SAAU,WACVC,oBAAqB,iBACrBC,MAAO,cACP,aAAc,aACdC,MAAO,QACPC,YAAa,eACbC,QAAS,UACTC,KAAM,OACNC,gBAAiB,aACjBC,IAAK,MACLC,eAAgB,YAChBC,OAAQ,SACRC,kBAAmB,eACnBC,QAAS,UACTC,mBAAoB,gBACpBC,QAAS,UACTC,mBAAoB,gBACpBC,IAAK,MACL,iBAAkB,YAClB,eAAgB,WAChB,gBAAiB,gBACjBC,UAAW,YACX,mBAAoB,qBAGyB,gBAIrDnE,EAAIwC,GAAG,cAAejB,GACtBvB,EAAIwC,GAAG,cAAejB,GACtBvB,EAAIwC,GAAG,cAAejB,GAiBf,IAAMvB,EAAIoE,WAChB,IAOD,gCACG,qBAAKC,MAAM,kBAAX,SACG,uCAAUxE,EAAV,sBAEJ,qBAAKyE,UAAU,eAAf,SACE,8CACchF,EADd,gBACgCG,EADhC,YAC8CE,OAGhD,qBAAK2E,UAAU,gBAAgBC,IAAKnF,QCrK3BoF,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASxD,OACP,cAAC,IAAMyD,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASC,eAAe,W","file":"static/js/main.514968a9.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport Mapboxgl from 'mapbox-gl';\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\nimport './Map.css';\r\nimport * as turf from \"@turf/turf\";\r\nimport { MapboxLegendControl, LegendOptions } from \"@watergis/mapbox-gl-legend\";\r\nimport \"@watergis/mapbox-gl-legend/css/styles.css\";\r\n\r\n\r\nMapboxgl.accessToken =\r\n  'pk.eyJ1IjoiYW5uYWdvbGQwMDciLCJhIjoiY2t2bTNsajF2MWNiMDJ1dGtxM2lwOTZybSJ9.BvkgIPX-S7LrBwyqDMgiZw';\r\n\r\nconst Map = () => {\r\n  const mapContainerRef = useRef(null);\r\n\r\n  const [lng, setLng] = useState(36.300);\r\n  const [lat, setLat] = useState(31.400);\r\n  const [zoom, setZoom] = useState(6.6);\r\n  const [rounded_area, setRounded_area] = useState(0);\r\n  // Initialize map when component mounts\r\n  useEffect(() => {\r\n    const map = new Mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n    //  style: 'mapbox://styles/annagold007/ckvm8uwn90pnp15mgbl2bstt0',\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n      logoPosition: 'bottom-left'\r\n    });\r\n\r\n    const draw = new MapboxDraw({\r\n      displayControlsDefault: false,\r\n      // Select which mapbox-gl-draw control buttons to add to the map.\r\n      controls: {\r\n       // point: true,\r\n       // line_string:true,\r\n        polygon: true,\r\n        trash: true\r\n      },\r\n      // Set mapbox-gl-draw to draw by default.\r\n      // The user does not have to click the polygon control button first.\r\n      //defaultMode: 'simple_select'\r\n        defaultMode: 'draw_polygon'\r\n      });\r\n    map.addControl(draw,'top-left');\r\n       \r\n    const geocoder = new MapboxGeocoder({\r\n      accessToken: Mapboxgl.accessToken,\r\n      types: 'poi',\r\n      // see https://docs.mapbox.com/api/search/#geocoding-response-object for information about the schema of each response feature\r\n      render: function (item) {\r\n      // extract the item's maki icon or use a default\r\n      const maki = item.properties.maki || 'marker';\r\n      return `<div class='geocoder-dropdown-item'>\r\n      <img class='geocoder-dropdown-icon' src='https://unpkg.com/@mapbox/maki@6.1.0/icons/${maki}-15.svg'>\r\n      <span class='geocoder-dropdown-text'>\r\n      ${item.text}\r\n      </span>\r\n      </div>`;\r\n      },\r\n      mapboxgl: Mapboxgl\r\n      });\r\n      map.addControl(geocoder);\r\n\r\n    map.addControl(new Mapboxgl.NavigationControl(), 'top-right');\r\n\r\n    map.on('move', () => {\r\n      setLng(map.getCenter().lng.toFixed(4));\r\n      setLat(map.getCenter().lat.toFixed(4));\r\n      setZoom(map.getZoom().toFixed(2));\r\n    });\r\n\r\n    map.on('load', () => {\r\n          const layers = map.getStyle().layers;\r\n          // Find the index of the first symbol layer in the map style\r\n          let firstSymbolId;\r\n          for (const layer of layers) {\r\n              if (layer === 'symbol') {\r\n                  firstSymbolId = layer.id;\r\n                  break;\r\n              }\r\n          }\r\n\r\n          map.addSource('urban-areas', {\r\n              'type': 'geojson',\r\n              'data': 'https://docs.mapbox.com/mapbox-gl-js/assets/ne_50m_urban_areas.geojson'\r\n          });\r\n          map.addLayer(\r\n              {\r\n                  'id': 'urban-areas-fill',\r\n                  'type': 'fill',\r\n                  'source': 'urban-areas',\r\n                  'layout': {},\r\n                  'paint': {\r\n                      'fill-color': '#f08',\r\n                      'fill-opacity': 0.4\r\n                  }\r\n// This is the important part of this example: the addLayer\r\n// method takes 2 arguments: the layer as an object, and a string\r\n// representing another layer's name. if the other layer\r\n// exists in the stylesheet already, the new layer will be positioned\r\n// right before that layer in the stack, making it possible to put\r\n// 'overlays' anywhere in the layer stack.\r\n// Insert the layer beneath the first symbol layer.\r\n              },\r\n              firstSymbolId\r\n          );\r\n\r\n\r\n        const targets = {\r\n            pipeline: \"Pipeline\",\r\n            pipeline_annotation: \"Pipeline Label\",\r\n            meter: \"Water Meter\",\r\n            \"flow meter\": \"Flow Meter\",\r\n            valve: \"Valve\",\r\n            firehydrant: \"Fire Hydrant\",\r\n            washout: \"Washout\",\r\n            tank: \"Tank\",\r\n            tank_annotation: \"Tank Label\",\r\n            wtp: \"WTP\",\r\n            wtp_annotation: \"WTP Label\",\r\n            intake: \"Intake\",\r\n            intake_annotation: \"Intake Label\",\r\n            parcels: \"Parcels\",\r\n            parcels_annotation: \"Parcels Label\",\r\n            village: \"Village\",\r\n            village_annotation: \"Village Label\",\r\n            dma: \"DMA\",\r\n            \"dma-annotation\": \"DMA Label\",\r\n            \"contour-line\": \"Countour\",\r\n            \"contour-label\": \"Contour Label\",\r\n            hillshade: \"Hillshade\",\r\n            'urban-areas-fill': 'urban-areas-fill'\r\n        };\r\n\r\n        map.addControl(new MapboxLegendControl(targets), \"top-right\");\r\n\r\n    });\r\n\r\n    map.on('draw.create', updateArea);\r\n    map.on('draw.delete', updateArea);\r\n    map.on('draw.update', updateArea);\r\n\r\n      function updateArea(e) {\r\n          const data = draw.getAll();\r\n          const answer = document.getElementById('calculation-box');\r\n          if (data.features.length > 0) {\r\n              const area = turf.area(data);\r\n            // Restrict the area to 2 decimal points.\r\n              const r_area = Math.round(area * 100) / 100;\r\n              setRounded_area(r_area.toFixed(2));\r\n          } else {map.getZoom()\r\n\r\n              if (e.type !== 'draw.delete')\r\n                  setRounded_area(0);\r\n          }\r\n      }\r\n    // Clean up on unmount\r\n    return () => map.remove();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div class=\"calculation-box\">\r\n          <p>Area: {rounded_area} square meters</p>\r\n        </div>\r\n      <div className='sidebarStyle'>\r\n        <div>\r\n          Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n        </div>\r\n      </div>\r\n      <div className='map-container' ref={mapContainerRef} />\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Map;","import React from 'react';\r\nimport Map from './Map';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}